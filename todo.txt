TODO UNCLAIMED:
-> Finish save/load features
-> Character Selection Screen + Armor/Hair System
-> Audio
-> Text input system (primarily for creating new games)
-> Aggressive mobs
-> Passive mobs
-> Attack animations and collision
-> Knock-back
-> Resize screen

TODO RYAN:
-> Fix hole-related bugs INFO NEEDED PRIOR TO COMPLETION: what to do when a player digs holes all around the hero?
-> Fix collision detection system to be able to handle mobs and collectibles
-> Create particle system for collectibles, digging/chopping/mining tiles, and other systems
-> Create lighting system

TODO CHRIS:
-> Design blog and web site
-> Fire sword logo
-> Farming Plants(see below)




TODO (extended):
> Farming Plants
    -Start with something like potatoes (avoid wheat until a more standard farmable item is working right)
    -Start with planting potatoes (nothing randomly generated)
    
    -Placing a PotatoItem on a TilledSoilTile adds the PotatoTile to the OBJECT_LAYER of the Block class
    -Placing a PotatoItem also adds the same PotatoTile instance to the growingTiles array in the Level class
    
    -Level class has a startGrowthTime variable
    -Every tick, level.update() checks startGrowthTime to see if 30 seconds have passed (30 seconds should be a constant called GAME_HOUR)
    -If 30 seconds have passed, reset startGrowthTime and loop through the growingTiles array
    -There is a random chance that a PotatoTile will grow during this loop
    -The chance is determined by a float value in the PotatoTile class called chanceOfGrowth
    
    -When the PotatoTile grows, it simply updates its Texture accordingly
    
    -If the PotatoTile is fully grown, remove it from the growingTiles array and set boolean isFullyGrown to true
    -When you move over a chunk, delete all the tiles from growingTiles that no longer exist in the activeBlocks array
    
    
    -When you hit a PotatoTile, it will produce a single PotatoCollectible or nothing if isFullyGrown is false, and multiple potatoes if true
        
        
OLD STUFF:
> Particle Engine
    -vectors and angles, blah blah blah...
    
> Passive Mobs
    -Give each mob type a max spawnable number (this will later be determined by the current biome)
    -Use Timer class to have a random chance to spawn a mob every GAME_HOUR (unless max spawnable number is reached)
    -Delete mobs if they've been inactive for a while or if you move far enough away
    -Have mobs wander around in the "active" area (9 chunks worth)
    -Balance the wandering so it looks natural
    
> Combat
    -Focus on slime mob and chicken mob
    -Create and display character health
    -Create combat state system for mobs
    -Chicken is a passive mob that starts in "wander" state and turns into "run away" state when hit *See Chicken Mob States
    -Create combat and wander state for slime mob
    -Slime combat state: determine direction of player, hop towards that direction
    -Slime wander state: random direction every few seconds.
    -Slime explode state: slime stops, starts glowing and explodes after a few seconds
    -Slime explosion causes damage to player if in range and slime dies
    -Combat mode activates when slime is within so many tiles (say 10) of player <- determining distance is the hard part
    -Wander mode activates when player gets far enough away from slime (say 10 tiles)
    -Slime explode state activates when slime's health is low (say 10 hp left) slime health is checked in combat mode tick.

> Lighting System
    -Make underground mostly dark (light circle around player)
    -Make torch or whatever lighten the underground up entirely (at least for now)

> Character Selection Screen
    -Create screen with character walk animation
    -Make character rotatable (copy code from inventory menu)
    -Add hair tab, face tab, etc which all display corresponding features as icons
    -Every time you click on a feature, character changes accordingly
    
> Audio
    -Create audio system to load all sound effects we might need
    -Activate audio files given certain actions (digging, hitting enemies, etc)

> Title Menu / Settings
    -Create Title Menu
        -New Game (Loads new game screen to select game name and character selection)
          -Creates save folder with game name and includes character file info, random map seed, etc
        -Continue Game (continues most recent game)
        -Load Game (loads load game screen to select a game to load) (game thumbnail??)
        -Settings (if we have any...)
        -Exit
    -Create Settings Menu (if we have settings...)




OPTIONAL:
> Resize Screen / Full Screen Mode
> Weather System
> Day/Night System
> Map (to view a pixel per tile map that you can use to view all visited areas)
> Mini-map and compass
> More sophisticated magic system
> Class system?
> Biomes...

*Chicken Mob States:
Mobs have states. States are changed by events/timers (like when you hit a chicken). Code for states might look like this pseudocode: {
  CHICKEN_WANDER_STATE = 0;
  CHICKEN_RUN_STATE = 1;
  Chicken Class {
    state = CHICKEN_WANDER_STATE;
    tick() {
      if state == CHICKEN_WANDER_STATE {
        moveRandomly();
      } else if state == CHICKEN_RUN_STATE {
        moveAwayFromCharacter();
      }
    }
  }
}

WanderState:
In wander state, there's a random chance every tick that the chicken walks a random number of steps (say, 4-10) in a random direction

RunAway State:
Determine direction of character relative to chicken and move chicken opposite direction every tick. A runaway timer is activated at start of RunAway state and it goes up after each tick. After so many ticks (say 1000) chicken goes back to WanderState. Starts over if the chicken is hit again.